{
  "data": {
    "allMdx": {
      "nodes": [
        {
          "fields": {
            "slug": "/blog/gatsbygram-case-study/",
            "excerpt": "DUMMY: How the Gatsbygram site was built."
          },
          "frontmatter": {
            "author": {
              "id": "Kyle Mathews"
            },
            "date": "2017-03-09",
            "title": "Gatsbygram Case Study",
            "seoTitle": "The Gatsbygram Case Study for SEO",
            "canonicalLink": "https://www.contentful.com/blog/2018/02/28/contentful-gatsby-video-tutorials/",
            "publishedAt": "Contentful Blog",
            "tags": ["case-studies", "e-commerce"],
            "image": {
              "id": "a5b40d6f-bed7-5266-992d-1c8872c88046",
              "relativePath": "blog/gatsbygram-case-study/ui-and-code.png"
            },
            "imageTitle": "Gatsbygram"
          },
          "rawBody": "---\ntitle: Gatsbygram Case Study\ndate: 2017-03-09\nauthor: \"Kyle Mathews\"\nimage: \"ui-and-code.png\"\nimageTitle: Gatsbygram\n---\n\n[Gatsbygram](https://gatsbygram.gatsbyjs.org) is a clone of Instagram built with\nGatsby v1.\n\nThe\n[source code for Gatsbygram](https://github.com/gatsbyjs/gatsby/tree/master/examples/gatsbygram)\nlives in the Gatsby monorepo. See the instructions at the end for how to start\nplaying with the code!\n\n<div>\n  <video controls=\"controls\" autoplay=\"true\" loop=\"true\">\n    <source type=\"video/mp4\" src=\"/gatsbygram.mp4\" />\n    <p>Your browser does not support the video element.</p>\n  </video>\n</div>\n\n## What is Gatsby\n\nGatsby is a JavaScript web framework that lets you build fast, dynamic,\nmobile-ready websites _without_ an advanced degree in JavaScript wizardry.\n\nIt combines the fast performance of static websites with the powerful\nabstractions, tools, and client capabilities of the React.js world.\n\n### Gatsby is fast\n\n[Gatsby automatically optimizes your site for the modern web](/docs/prpl-pattern/).\nYou provide pages and Gatsby stitches them together so they load as fast as\npossible.\n\nAs proof of this, Gatsbygram loads _2-3x faster_ than the real Instagram site.\n\nI tested Gatsbygram and Instagram on\n[webpagetest.org](https://www.webpagetest.org/) using a simulated 3G network and\na Moto G4 smartphone—a budget Android typical of many lower-end phones used\ntoday. The median\n[speed index](https://sites.google.com/a/webpagetest.org/docs/using-webpagetest/metrics/speed-index)\nscore for [Gatsbygram](http://www.webpagetest.org/result/170310_XP_11AS/) was\n3151 vs. 8251 for\n[Instagram](http://www.webpagetest.org/result/170310_PC_11AZ/).\n\n![gatsbygram vs. instagram filmstrip](gatsbygram-instagram.png)_Filmstrip of\nGatsbygram (top) and Instagram (bottom) loading on webpagetest.org_\n\nThe second repeat view is even faster for Gatsbygram as it now loads from its\nservice worker. It has _pixels on the screen in under a 1/2 second on a budget\nAndroid device_! And for both the initial and repeat view, Gatsbygram _finishes_\nloading a full second before Instagram gets started.\n\n![gatsbygram vs. instagram filmstrip repeat\nload](gatsbygram-instagram-repeat-load.png)_Filmstrip\nof a repeat view of Gatsbygram (top) and Instagram (bottom) loading on\nwebpagetest.org_\n\nThe difference in Time to Interactivity (TTI) (measure of how long before the\nuser can actually interact with the page e.g. click on a link) between the sites\nis just as dramatic. Gatsbygram's TTI is 6.1s vs 14.1s for Instagram.\n\n- [Gatsbygram's WebPagetest results](http://www.webpagetest.org/result/170310_XP_11AS/)\n- [Instagram's WebPagetest results](http://www.webpagetest.org/result/170310_PC_11AZ/)\n\n### Gatsby is built for the next billion internet users\n\nAs\n[Benedict Evans has noted](http://ben-evans.com/benedictevans/2015/5/13/the-smartphone-and-the-sun),\nthe next billion people poised to come online will be using the internet almost\nexclusively through smartphones.\n\nSmartphones with decent specs (as good or better than the Moto G4), a great\nbrowser, but _without_ a reliable internet connection.\n\nGatsby uses modern web performance ideas (e.g.\n[PRPL](https://developers.google.com/web/fundamentals/performance/prpl-pattern/))\ndeveloped by the Google Chrome Developer Relations team and others to help\nwebsites work well on modern browsers with unreliable networks.\n\nSites built with Gatsby run as much as possible in the client so regardless of\nthe network conditions—good, bad, or nonexistent—things will keep working.\n\nMany of the top e-commerce websites in areas where people are coming online for\nthe first time are developing their websites using these techniques.\n\nRead Google's case studies on:\n\n- [Flipkart (India)](https://developers.google.com/web/showcase/2016/flipkart)\n- [Konga (Nigeria)](https://developers.google.com/web/showcase/2016/konga)\n- [Housing.com (India)](https://developers.google.com/web/showcase/2016/housing)\n\n### Gatsby is simple\n\nModern JavaScript websites are too complex to rely on developers always\nconfiguring things correctly. Gatsby simplifies website development by\nextracting configuration out of your site and moving it into the framework and\ncommunity plugins.\n\nYou give Gatsby React.js components, data, and styles and Gatsby gives you back\nan optimized website.\n\nGatsbygram is a completely vanilla Gatsby site. Its optimizations are from the\nframework.\n\nGatsby includes a full modern JavaScript toolchain (Babel/webpack/Uglify) with\noptimized production builds and an innovative _declarative_ asset pipeline.\n\nFor Gatsbygram, Gatsby generates over _1000_ image thumbnails for responsive\nimages without _any_ custom scripting by leveraging the Gatsby image processing\nplugin [gatsby-transformer-sharp](/packages/gatsby-transformer-sharp/).\n\nStop wasting time and build something!\n\n## App structure\n\nAll static site generators create a set of files that determine the routing in\nyour site. Typically, you define the output file structure (and thus URL\nstructure) of your site by way of the input structure. For example the input\nstructure:\n\n```text\nmy-site/\n  index.md\n  blogs/\n    blog1.md\n```\n\n...would be transformed to:\n\n```text\nmy-site/\n  index.html\n  blogs/\n    blog1.html\n```\n\nThis is fine at first, but can be limiting. For example, in Gatsbygram, we have\na JSON data blob scraped from an Instagram user profile. From this we want to\ngenerate a page for each image. We couldn't do this with a typical static site\ngenerator, but Gatsby lets you define routes programmatically through the\n`createPages` API using any data you have available.\n\nHere is how we define pages from our JSON data for Gatsbygram at build time in\nthe site's\n[`gatsby-node.js` file](https://github.com/gatsbyjs/gatsby/blob/master/examples/gatsbygram/gatsby-node.js):\n\n```javascript:title=gatsby-node.js\nconst path = require(`path`)\nconst slug = require(`slug`)\nconst { slash } = require(`gatsby-core-utils`)\n\n// Implement the Gatsby API “createPages”. This is\n// called after the Gatsby bootstrap is finished so you have\n// access to any information necessary to programmatically\n// create pages.\nexports.createPages = async ({ graphql, actions, reporter }) => {\n  const { createPage } = actions\n\n  // The “graphql” function allows us to run arbitrary\n  // queries against this Gatsbygram's graphql schema. Think of\n  // it like Gatsbygram has a built-in database constructed\n  // from static data that you can run queries against.\n  //\n  // Post is a data node type derived from data/posts.json\n  // which is created when scraping Instagram. “allPostsJson”\n  // is a \"connection\" (a GraphQL convention for accessing\n  // a list of nodes) gives us an easy way to query all\n  // Post nodes.\n  const result = await graphql(\n    `\n      {\n        allPostsJson(limit: 1000) {\n          edges {\n            node {\n              id\n            }\n          }\n        }\n      }\n    `\n  )\n\n  if (result.errors) {\n    reporter.panicOnBuild(`Error while running GraphQL query.`)\n    return\n  }\n\n  // Create image post pages.\n  const postTemplate = path.resolve(`src/templates/post-page.js`)\n  // We want to create a detailed page for each\n  // Instagram post. Since the scraped Instagram data\n  // already includes an ID field, we just use that for\n  // each page's path.\n  result.data.allPostsJson.edges.forEach(edge => {\n    // Gatsby uses Redux to manage its internal state.\n    // Plugins and sites can use functions like \"createPage\"\n    // to interact with Gatsby.\n    createPage({\n      // Each page is required to have a `path` as well\n      // as a template component. The `context` is\n      // optional but is often necessary so the template\n      // can query data specific to each page.\n      path: `/${slug(edge.node.id)}/`,\n      component: slash(postTemplate),\n      context: {\n        id: edge.node.id,\n      },\n    })\n  })\n}\n```\n\n## Using templates\n\nGatsby uses standard React.js components to render pages. When you define a page\nin the `createPages` API, you specify its component. Those components, usually\ncalled templates, get reused with page-specific data to generate the different\npages.\n\nAs you can see above, when defining a page, we can set \"context\" data, which is\npassed as a `prop` to the component and as a\n[GraphQL variable](https://graphql.org/learn/queries/#variables) in our `GraphQL`\nquery. For the\n\"[post template](https://github.com/gatsbyjs/gatsby/blob/master/examples/gatsbygram/src/templates/post-page.js)\",\nwe pass the id to the post. Below we use that id to query our `GraphQL` schema\nand return a fully formed page:\n\n```jsx:title=src/templates/post-page.js\nimport React from \"react\"\nimport PostDetail from \"../components/post-detail\"\n\nclass PostTemplate extends React.Component {\n  render() {\n    return (\n      // PostDetail is used for this detail page and\n      // also in the modal.\n      <PostDetail post={this.props.data.posts} />\n    )\n  }\n}\n\nexport default PostTemplate\n\n// The post template's GraphQL query. Notice the “id”\n// variable which is passed in. We set this on the page\n// context in gatsby-node.js.\n//\n// All GraphQL queries in Gatsby are run at build-time and\n// loaded as plain JSON files so have minimal client cost.\nexport const pageQuery = `\n  query PostPage($id: String!) {\n    # Select the post which equals this id.\n    posts(id: { eq: $id }) {\n      # Specify the fields from the post we need.\n      username\n      avatar\n      likes\n      id\n      text\n      # Date fields have special arguments. This one computes\n      # how many weeks have passed since the post was created.\n      # All calculations like this (like all GraphQL query\n      # activity) happens at build-time! So has minimal cost\n      # for the client.\n      weeksAgo: time(difference: \"weeks\")\n      image {\n        children {\n          ... on ImageSharp {\n            # Here we query for *multiple* image thumbnails to be\n            # created. So with no effort on our part, 100s of\n            # thumbnails are created. This makes iterating on\n            # designs effortless as we simply change the args\n            # for the query and we get new thumbnails.\n            big: fluid(maxWidth: 640) {\n              src\n              srcSet\n            }\n          }\n        }\n      }\n    }\n  }\n`\n```\n\n## Creating React.js component pages\n\nIn addition to creating pages for our Instagram photos, we want to make an index\npage for browsing all photos. To build this index page, Gatsby lets us create\npages using React.js components.\n\n```text\npages/\n  index.js\n  about.js\n```\n\nThese React component pages can query the Gatsbygram GraphQL schema for data and\nare automatically converted into their own pages at `gatsbygram.gatsbyjs.org/`\nand `gatsbygram.gatsbyjs.org/about/`.\n\nGatsbygram's `about.js` is a plain React component with no query. `index.js` is\nmore complex. It queries for thumbnails for all images and has an infinite\nscroll implementation to lazy load in image thumbnails.\n\n[Read pages/index.js on GitHub](https://github.com/gatsbyjs/gatsby/blob/master/examples/gatsbygram/src/pages/index.js)\n[Read pages/about.js on GitHub](https://github.com/gatsbyjs/gatsby/blob/master/examples/gatsbygram/src/pages/about.js)\n\n## The Layout Component\n\nEach Gatsby site has a top-level layout component at `layouts/index.js`. This\nlayout component is used on every page of your site so can contain things like\nyour header, footer, and default page structure. It is also used as the\n\"[app shell](https://developers.google.com/web/updates/2015/11/app-shell)\" when\nloading your site from a service worker.\n\nA small layout component might look something like this.\n\n```jsx\nimport React from \"react\"\nimport { Link } from \"gatsby\"\n\nclass Layout extends React.Component {\n  render() {\n    return (\n      <div>\n        <Link to=\"/\">Home</Link>\n        <br />\n        {/* Render children pages */}\n        {this.props.children()}\n      </div>\n    )\n  }\n}\n\nexport default Layout\n```\n\nEvery page will be rendered as children of the `Layout` component:\n\n```jsx\n<Layout>\n  <Page />\n</Layout>\n```\n\nGatsbygram's layout component is somewhat more complicated than most sites as it\nhas logic to show clicked images in either a modal on larger screens or on their\nown page on smaller screens.\n\n[Read Gatsbygram's Layout component on GitHub](https://github.com/gatsbyjs/gatsby/blob/master/examples/gatsbygram/src/layouts/index.js).\n\n## Client routing and pre-caching\n\nGatsby loads first a static server-rendered HTML page and then the JavaScript\nto convert the site into a web application. Which means that clicking around the\nsite doesn't require a page reload. Gatsby _pre-caches_ code and data needed for\nother pages so that clicking on a link loads the next page instantly.\n\nAll the setup for this is handled behind the scenes. Gatsby uses\n[@reach/router](https://reach.tech/router/) under the hood but\ngenerates all the configuration for you.\n\nNormally page resources are pre-cached with a service worker. But as several\nbrowsers (Safari/Microsoft Edge) still don't support Service Workers, the\n[Gatsby `<Link>` component](/docs/linking-between-pages/#the-gatsby-link-component) pre-caches resources for\npages it links to by loading them into memory.\n\n## Plugins\n\nGatsby has always had a rich set of lifecycle APIs to allow you to hook into\nvarious events during development, building, and in the client.\n\nGatsby 1.0 adds new APIs and also adds a\n[new plugin architecture](/docs/plugins/). So functionality can now be extracted\nfrom sites and made reusable. Most of the new functionality in Gatsby 1.0 is\npowered by plugins.\n\nPlugins are added to a site in its `gatsby-config.js`. Here's what Gatsbygram's\nconfig file looks like:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  siteMetadata: {\n    title: `Gatsbygram`,\n  },\n  plugins: [\n    /*\n     * Gatsby's data processing layer begins with “source”\n     * plugins.  You can source data nodes from anywhere but\n     * most sites, like Gatsbygram, will include data from\n     * the filesystem so we start here with\n     * “gatsby-source-filesystem”.\n     *\n     * A site can have as many instances of\n     * gatsby-source-filesystem as you need.  Each plugin\n     * instance is configured with a root path where it then\n     * recursively reads in files and adds them to the data\n     * tree.\n     */\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `data`,\n        path: `${__dirname}/data`,\n      },\n    },\n    // This plugin exposes helper functions for processing\n    // images with the NPM package “sharp”. It's used by\n    // several other plugins.\n    `gatsby-plugin-sharp`,\n    // This plugin identifies file nodes that are images and\n    // transforms these to create new “ImageSharp” nodes.\n    // With them you can resize images and\n    // generate responsive image thumbnails.\n    `gatsby-transformer-sharp`,\n    // This plugin transforms JSON file nodes.\n    `gatsby-transformer-json`,\n    // This plugin sets up the popular CSS-in-JS library\n    // Glamor. It handles adding a Babel plugin and webpack\n    // configuration as well as setting up optimized server\n    // rendering and client re-hydration.\n    `gatsby-plugin-glamor`,\n    // This plugin takes your configuration and generates a\n    // web manifest file so Gatsbygram can be added to your\n    // homescreen on Android.\n    {\n      resolve: `gatsby-plugin-manifest`,\n      options: {\n        name: `Gatsbygram`,\n        short_name: `Gatsbygram`,\n        start_url: `/`,\n        background_color: `#f7f7f7`,\n        theme_color: `#191919`,\n        display: `minimal-ui`,\n      },\n    },\n    // This plugin generates a service worker and AppShell\n    // html file so the site works offline and is otherwise\n    // resistant to bad networks. Works with almost any\n    // site!\n    `gatsby-plugin-offline`,\n    // This plugin sets up Google Analytics for you.\n    {\n      resolve: `gatsby-plugin-google-analytics`,\n      options: {\n        trackingId: `UA-91652198-1`,\n      },\n    },\n  ],\n}\n```\n\n## Styles\n\nGatsbygram uses two popular and complementary CSS-in-JS libraries,\n[Typography.js](https://github.com/KyleAMathews/typography.js) and\n[Glamor](https://github.com/threepointone/glamor).\n\nTypography.js is a powerful toolkit for building websites with beautiful design.\n\nGatsbygram uses Typography.js to generate the _global_ styles for the site\nhelping set the overall feel of the design.\n\nGlamor lets you write _real CSS_ in JavaScript inline in your React.js\ncomponents. It is used for _component_ styles.\n\nTypography.js exposes two helper JavaScript functions, `rhythm` and `scale` to\nhelp keep your design in sync as you make changes. Instead of using hard-coded\nspacing values (which break as soon as you change your global theme), you use\nthe Typography.js helper functions e.g.\n\n```jsx\nimport React from \"react\";\nimport { rhythm, scale } from \"../utils/typography\";\n\nclass SampleComponent extends React {\n  render () {\n    return (\n      <div\n        {/* The “css” prop works the same as the built-in “style” prop */}\n        css={{\n          // 1 rhythm is equal to the height of the line-height of\n          // normal body text.\n          padding: rhythm(1),\n        }}\n      >\n        <h1\n          css={{\n            // Make this h1 slightly larger than normal.\n            // By default, h1 is set to a scale value of 1.\n            ...scale(6/5),\n          }}\n        >\n          My sweet title\n        </h1>\n        <p>Hello friends</p>\n      </div>\n    )\n  }\n}\n```\n\nTogether they allow you to quickly iterate on designs.\n\nThey also contribute to Gatsbygram's excellent loading speed. The holy grail of\nCSS performance is _inlined critical CSS_. Meaning a) only ship a page with the\nCSS necessary to render that page and b) inline it in the `<head>` instead of\nputting it in a separate file. There are various tools to make this happen but\nthey tend to involve extensive configuration and heavy post-processing.\n\nBut with Typography.js and Glamor you get optimized CSS with no tedious,\nerror-prone bookkeeping. Typography.js (by definition) generates only global\nstyles so its styles are included on every page. Glamor includes some\n[clever server-rendering optimizations](https://github.com/threepointone/glamor/blob/master/docs/server.md)\nwhich I've implemented in the\n[Gatsby Glamor plugin](/packages/gatsby-plugin-glamor/) where it automatically\nextracts out the CSS used _in components on the page being server rendered_ and\nautomatically inlines those styles in the generated HTML page.\n\nSuper fast CSS by default. 👏👏👏\n\n## Creating your own Gatsbygram\n\nIt's easy to create your own \"Gatsbygram\" site from an Instagram account.\n\n### Instructions on setting up your own Gatsbygram site\n\n```shell\n# Clone the Gatsby repo.\ngit clone -b 1.0 git@github.com:gatsbyjs/gatsby.git\ncd gatsby/examples/gatsbygram\nnpm install\n\n# Remove the committed scrapped Instagram data\nrm -r data\n\n# Scrape a new account\nnode scrape.js INSTAGRAM_USERNAME\n\n# Wait for pictures to download...\n\n# Start the Gatsby development server. The initial\n# run will take extra time as it processes\n# images the first time.\nnpm run develop\n```\n\nWhile writing this post I scraped a few accounts and published their resulting\n\"Gatsbygram\" sites:\n\n- https://iceland-gatsbygram.netlify.app\n- https://tinyhouses-gatsbygram.netlify.app\n\n_With thanks to Sam Bhagwat, Sunil Pai, Nolan Lawson, Nik Graf, Jeff Posnick,\nand Addy Osmani for their reviews._\n\n_And a special thanks to Kristo Jorgenson for his\n[refactor of the “App structure” section](https://github.com/gatsbyjs/gatsby/pull/708)._\n"
        }
      ]
    }
  }
}
